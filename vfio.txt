########################################################################################
# compile QEMU
./configure --target-list=x86_64-softmmu --enable-libusb

########################################################################################
# Install necessary packages
sudo apt install qemu-kvm
sudo apt install ovmf
# Fedora has them installed by default

########################################################################################
# Kernel parameter

sudo vim /etc/default/grub
    GRUB_CMDLINE_LINUX_DEFAULT=”quiet intel_iommu=on”
sudo update-grub

# Fedora & AMD
sudo grubby --update-kernel=ALL --args="amd_iommu=on"
sudo vim /etc/default/grub
    amd_iommu=on iommu=pt rd.driver.pre=vfio-pci
sudo grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg 

# reboot and check
sh list_iommu_group.sh
########################################################################################
# prevent the default driver to bind to the graphics card. # OR unbind driver before passthrough
sudo vim /etc/default/grub
    GRUB_CMDLINE_LINUX_DEFAULT="quiet splash intel_iommu=on iommu=pt isolcpus=4-15 nohz_full=4-15 rcu_nocbs=4-15 module_blacklist=nouveau nouveau.modeset=0 vfio-pci.ids=10de:249d,10de:228b"
    GRUB_CMDLINE_LINUX_DEFAULT="quiet splash intel_iommu=on iommu=pt isolcpus=2-7,10-15 nohz_full=2-7,10-15 rcu_nocbs=2-7,10-15 module_blacklist=nouveau nouveau.modeset=0 vfio-pci.ids=10de:249d,10de:228b"
    GRUB_CMDLINE_LINUX_DEFAULT="quiet splash intel_iommu=on iommu=pt isolcpus=2-5,8-11 nohz_full=2-5,8-11 rcu_nocbs=2-5,8-11 module.blacklist=amdgpu vfio-pci.ids=1002:73df,1002:ab28"

sudo grub-mkconfig -o /boot/grub/grub.cfg (or sudo update-grub; or sudo update-initramfs -u)

################################################
# alternatively for blacklisting nouveau (not using kernel parameter)
sudo bash -c "echo blacklist nouveau > /etc/modprobe.d/blacklist-nouveau.conf"
sudo bash -c "echo options nouveau modeset=0 >> /etc/modprobe.d/blacklist-nouveau.conf"

################################################
# alternatively for assigning GPU to VFIO (not using kernel parameter)
# In order to make the graphics card available to the Windows VM, we will assign a “dummy” driver as a place holder: vfio-pci.
sudo vim /etc/modprobe.d/vfio.conf
echo options vfio-pci ids=$VGAPT_VGA_ID,$VGAPT_VGA_AUDIO_ID > /etc/modprobe.d/vfio.conf
sudo bash -c "echo options vfio-pci ids=10de:2484,10de:228b > /etc/modprobe.d/vfio.conf"

sudo bash -c "echo vfio > /etc/modules-load.d/vfio.conf"
sudo bash -c "echo vfio-pci > /etc/modules-load.d/vfio-pci.conf"
# Fedora needs one more:
sudo bash -c "echo "vfio_iommu_type1" > /etc/modules-load.d/vfio_iommu_type1.conf"

################################################################
# reboot and check what driver is being used
lspci -knn

########################################################################################
# Finally
bash vm.sh


########################################################################################
# Performance Tuning
########################################################################################
watch -n.5 "cat /proc/cpuinfo | grep \"^[c]pu MHz\""
# hugepage
# vm.nr_hugepages should be a bit larger than necessary e.g. 8200*2 > 16384
mount -t hugetlbfs hugetlbfs /dev/hugepages
sysctl vm.nr_hugepages=8200
# qemu -m 16384 -mem-prealloc -mem-path /dev/hugepages 

# CPU pinning
# check CPU topology
lscpu -e
lstopo
# CPU pinning using taskset
# 1111111111000000=0xFFC0 (binary is reverse of the sequence of cpu id)
taskset 0xFFC0 qemu-system-x86_64 \blabla
# cpu isolation kernel parameters
sudo vim /etc/default/grub
    GRUB_CMDLINE_LINUX_DEFAULT="quiet splash amd_iommu=on isolcpus=4-15 nohz_full=4-15 rcu_nocbs=4-15"

# OVMF screen resolution
# Need to `ESC` during `Tianocore` UEFI screen, set resolution, then `reset`
