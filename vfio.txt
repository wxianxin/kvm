########################################################################################
# Install necessary packages
sudo apt install qemu-kvm
sudo apt install ovmf
# Fedora has them installed by default
########################################################################################
# Kernel parameter
sudo vim /etc/default/grub
    GRUB_CMDLINE_LINUX_DEFAULT=”quiet intel_iommu=on”
sudo update-grub

# Fedora
sudo grubby --update-kernel=ALL --args="amd_iommu=on"
sudo vim /etc/default/grub
    amd_iommu=on iommu=pt rd.driver.pre=vfio-pci
sudo dracut -f --kver $(uname -r)

# reboot and check
sh list_iommu_group.sh
########################################################################################
# prevent the default driver to bind to the graphics card.
sudo vim /etc/default/grub
	GRUB_CMDLINE_LINUX_DEFAULT="quiet splash amd_iommu=on vfio-pci.ids=10de:1f15,10de:10f9,10de:1ada,10de:1adb"
sudo update-grub
################################################################
sudo bash -c "echo blacklist nouveau > /etc/modprobe.d/blacklist-nouveau.conf"
sudo bash -c "echo options nouveau modeset=0 >> /etc/modprobe.d/blacklist-nouveau.conf"
sudo update-initramfs -u

################################
# In order to make the graphics card available to the Windows VM, we will assign a “dummy” driver as a place holder: vfio-pci.
sudo vim /etc/modprobe.d/vfio.conf
    # VGAPT_VGA_ID='10de:1401'
    # VGAPT_VGA_AUDIO_ID='10de:0fba'
    # VGAPT_VGA_BUS=01:00.0
    # VGAPT_VGA_AUDIO_BUS=01:00.1
    # options vfio-pci ids=10de:1b81,10de:10f0
    echo options vfio-pci ids=$VGAPT_VGA_ID,$VGAPT_VGA_AUDIO_ID > /etc/modprobe.d/vfio.conf

sudo bash -c "echo vfio > /etc/modules-load.d/vfio.conf"
sudo bash -c "echo vfio-pci > /etc/modules-load.d/vfio-pci.conf"
# Fedora needs one more:
echo "vfio_iommu_type1" > /etc/modules-load.d/vfio_iommu_type1.conf

################################################################
# reboot and check what driver is being used
lspci -knn

########################################################################################
# Finally
bash vm.sh


########################################################################################
# Performance Tuning
watch -n.5 "cat /proc/cpuinfo | grep \"^[c]pu MHz\""
# hugepage
mount -t hugetlbfs hugetlbfs /dev/hugepages
sysctl vm.nr_hugepages=8200
# qemu -m 16384 -mem-prealloc -mem-path /dev/hugepages 

# CPU pinning
# check CPU topology
lscpu -e
lstopo
# CPU pinning using taskset
# 1111111111000000=0xFFC0 (binary is reverse of the sequence of cpu id)
taskset 0xFFC0 qemu-system-x86_64 \blabla

01:00.0 10de:1f15
01:00.1 10de:10f9
01:00.2 10de:1ada
01:00.3 10de:1adb
